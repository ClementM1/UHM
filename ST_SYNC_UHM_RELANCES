AS 
/* 
****************** DOCUMENTATION TEMPLATE ******************** 
-- DID AUTHOR: ERICK VAN HOOREN 
-- DID CREATIONDATE: 2022-09-09
-- DID VERSION: 1.0.0  
-- DID DESCRIPTION:  
-- DID BUSINESSRULES: EVERY DAY  
-- DID LASTMODIFIEDBY:  
******************* DOCUMENTATION TEMPLATE ********************  
*/ 


DECLARE @TASK NVARCHAR(50) = 'ST_SYNC_UHM_RELANCES'; 


BEGIN 
SET NOCOUNT ON; 
BEGIN TRY 
 


-- ------------------ INIT -------------------- --  
-- TASK DETAILS TABLE 
IF OBJECT_ID('DBO.CFG_SYNCDETAILS', 'U') IS NULL 
BEGIN; 
  
    CREATE TABLE DBO.CFG_SYNCDETAILS ( 
        TASK NVARCHAR(50) NOT NULL CONSTRAINT PK_CFG_SYNCDETAILS PRIMARY KEY 
        , LAST_RUNDT DATETIME NULL 
        , LAST_SUCCESSDT DATETIME NULL 
        , LAST_RUNTIME NVARCHAR(8) NULL 
        , ERRORMSG NVARCHAR(MAX) NULL 
        , AQID BIGINT 
        , FGID BIGINT 
        , MTAID BIGINT 
    ); 
END; 
-- ------------------ LOGS -------------------- --  
IF EXISTS (SELECT 1 FROM DBO.CFG_SYNCDETAILS WHERE TASK = @TASK) 
BEGIN; 
    UPDATE DBO.CFG_SYNCDETAILS SET LAST_RUNDT = GETDATE(), ERRORMSG = NULL WHERE TASK = @TASK; 
END; 
ELSE 
BEGIN; 
    INSERT INTO DBO.CFG_SYNCDETAILS (TASK, LAST_RUNDT) VALUES (@TASK, GETDATE()); 
END; 
  
  
-- ------------------ PK & IDX ------------------ -- 
  
  
IF NOT EXISTS (SELECT 1 FROM SYS.INDEXES AS I WITH(NOLOCK) WHERE I.NAME = 'IDX_MATCH_USERID' AND OBJECT_ID = OBJECT_ID('DBO.SYNC_UHM_RELANCES', 'U')) 
BEGIN; 
    CREATE NONCLUSTERED INDEX IDX_MATCH ON [DBO].[SYNC_UHM_RELANCES] ([NUM_CONTACT]) /* INCLUDE ([X]) */ ; 
END;  

  
-- ------------------ REJECT MNGT ------------------ -- 
  
  
-- EMPTY BUSINESS KEY 
UPDATE TGT SET 
      TGT.OPTI_REJECTED        = 2 
    , TGT.OPTI_REJECTED_REASON = 'NUM_CONTACT' 
FROM DBO.SYNC_UHM_RELANCES AS TGT 
WHERE (TGT.OPTI_REJECTED = 0  
OR TGT.OPTI_REJECTED IS NULL) 
AND (TGT.NUM_CONTACT IS NULL  
OR TGT.NUM_CONTACT = '')
;  
  
  
-- ------------------ MATCH TABLE ------------------ -- 
  
  
-- CHECK 
IF OBJECT_ID('DBO.TMP_MATCH_USR', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_USR; 
END; 
  
-- CREATE 
CREATE TABLE DBO.TMP_MATCH_USR( 
      SYNCID INT NOT NULL 
    , USERID INT NOT NULL 
    , PRIMARY KEY (SYNCID, USERID) 
); 
  
-- FILL ID_MAGELLAN
INSERT INTO DBO.TMP_MATCH_USR 
    ( SYNCID 
    , USERID ) 
SELECT     
      SRC.ID AS SYNCID 
    , USR.ID AS USERID 
FROM DBO.SYNC_UHM_RELANCES AS SRC WITH(NOLOCK)  
    INNER JOIN DBO.USERS_UHM_CONTACTS AS USR WITH(NOLOCK)  
        ON SRC.NUM_CONTACT = USR.NUM_CONTACT --CONVERT(INT,RIGHT(USR.ID_MAGELLAN,LEN(USR.ID_MAGELLAN)-1))
WHERE (SRC.OPTI_REJECTED = 0  
OR SRC.OPTI_REJECTED IS NULL)
; 

  
-- ------------------ UPSERT ------------------ -- 
  
  
-- UPDATE FIRST... 
UPDATE TGT SET 
        -- NEVER UPDATE BUSINESS KEY 
          TGT.CODE_TYPE_RELANCE             = SRC.CODE_TYPE_RELANCE
        , TGT.CODE_TYPE_PRODUIT         = SRC.CODE_TYPE_PRODUIT
        , TGT.NUM_LOGISTIQUE            = SRC.NUM_LOGISTIQUE
        , TGT.CODE_SOCIETE          = SRC.CODE_SOCIETE
        , TGT.CODE_TITRE            = SRC.CODE_TITRE
        , TGT.NUM_RANG              = SRC.NUM_RANG
        , TGT.CODE_ESPACE_CLIENT        = SRC.CODE_ESPACE_CLIENT
        , TGT.DATE_ARRET            = SRC.DATE_ARRET
        , TGT.DATE_EXPEDITION_RELANCE       = SRC.DATE_EXPEDITION_RELANCE
        , TGT.CODE_OPERATION_EDITEUR        = SRC.CODE_OPERATION_EDITEUR
        , TGT.LIBELLE_OPERATION_EDITEUR     = SRC.LIBELLE_OPERATION_EDITEUR
        , TGT.CODE_ALIAS_OPERATION      = SRC.CODE_ALIAS_OPERATION
        , TGT.CODE_REF_CO           = SRC.CODE_REF_CO
        , TGT.LIBELLE_REF_CO            = SRC.LIBELLE_REF_CO
        , TGT.CODE_ALIAS_REF_CO         = SRC.CODE_ALIAS_REF_CO
        , TGT.CODE_OPERATION_EDITEUR_REL    = SRC.CODE_OPERATION_EDITEUR_REL
        , TGT.ALIAS_OE_REL          = SRC.ALIAS_OE_REL
        , TGT.BOOLEEN_TIER_PAYEUR        = SRC.BOOLEEN_TIER_PAYEUR
        , TGT.NUM_CONTACT_TP            = SRC.NUM_CONTACT_TP
        , TGT.CODE_COMMUNICATION_RELANCE    = SRC.CODE_COMMUNICATION_RELANCE
        , TGT.MODIFIED_DT           = GETDATE()
        , TGT.LIBELLE_RNGREL        = SRC.LIBELLE_RNGREL
FROM DBO.DATA_UHM_HISTORIQUE_RELANCES AS TGT 
    INNER JOIN DBO.TMP_MATCH_USR AS MAT WITH(NOLOCK) 
        ON MAT.USERID = TGT.USERID 
    INNER JOIN DBO.SYNC_UHM_RELANCES AS SRC WITH(NOLOCK) 
        ON  SRC.NUM_CONTACT = TGT.NUM_CONTACT
        AND TGT.NUM_LOGISTIQUE  = SRC.NUM_LOGISTIQUE
        AND TGT.NUM_RANG    = SRC.NUM_RANG
                

  
-- ... THEN INSERT 
INSERT INTO DBO.DATA_UHM_HISTORIQUE_RELANCES  
    (  NUM_CONTACT  
    , CODE_TYPE_RELANCE         
    , CODE_TYPE_PRODUIT         
    , NUM_LOGISTIQUE            
    , CODE_SOCIETE              
    , CODE_TITRE                
    , NUM_RANG                  
    , CODE_ESPACE_CLIENT        
    , DATE_ARRET                
    , DATE_EXPEDITION_RELANCE   
    , CODE_OPERATION_EDITEUR    
    , LIBELLE_OPERATION_EDITEUR 
    , CODE_ALIAS_OPERATION      
    , CODE_REF_CO               
    , LIBELLE_REF_CO            
    , CODE_ALIAS_REF_CO         
    , CODE_OPERATION_EDITEUR_REL            
    , ALIAS_OE_REL          
    , BOOLEEN_TIER_PAYEUR    
    , NUM_CONTACT_TP            
    , CODE_COMMUNICATION_RELANCE
    , USERID
    , LIBELLE_RNGREL
    ) 
SELECT
      SRC.NUM_CONTACT   
    , SRC.CODE_TYPE_RELANCE         
    , SRC.CODE_TYPE_PRODUIT         
    , SRC.NUM_LOGISTIQUE            
    , SRC.CODE_SOCIETE              
    , SRC.CODE_TITRE                
    , SRC.NUM_RANG                  
    , SRC.CODE_ESPACE_CLIENT        
    , SRC.DATE_ARRET                
    , SRC.DATE_EXPEDITION_RELANCE   
    , SRC.CODE_OPERATION_EDITEUR    
    , SRC.LIBELLE_OPERATION_EDITEUR 
    , SRC.CODE_ALIAS_OPERATION      
    , SRC.CODE_REF_CO               
    , SRC.LIBELLE_REF_CO            
    , SRC.CODE_ALIAS_REF_CO         
    , SRC.CODE_OPERATION_EDITEUR_REL            
    , SRC.ALIAS_OE_REL          
    , SRC.BOOLEEN_TIER_PAYEUR   
    , SRC.NUM_CONTACT_TP            
    , SRC.CODE_COMMUNICATION_RELANCE 
    , MAT.USERID
    , SRC.LIBELLE_RNGREL
FROM DBO.SYNC_UHM_RELANCES AS SRC WITH(NOLOCK) 
    INNER JOIN DBO.TMP_MATCH_USR AS MAT WITH(NOLOCK)
        ON MAT.SYNCID = SRC.ID
WHERE  (SRC.OPTI_REJECTED = 0
OR SRC.OPTI_REJECTED IS NULL) 
AND NOT EXISTS ( 
    SELECT 1  
    FROM DBO.DATA_UHM_HISTORIQUE_RELANCES AS TGT WITH(NOLOCK)  
    WHERE SRC.NUM_CONTACT = TGT.NUM_CONTACT
        AND TGT.NUM_LOGISTIQUE  = SRC.NUM_LOGISTIQUE
        AND TGT.NUM_RANG        = SRC.NUM_RANG

); 


-- ------------------ CLEAN UP -------------------- -- 
  
  
IF OBJECT_ID('DBO.TMP_MATCH_USR', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_USR; 
END; 
  
  
-- ------------------ END LOGS ------------------ -- 
  
  
UPDATE DBO.CFG_SYNCDETAILS SET 
    LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    , LAST_SUCCESSDT = GETDATE() 
WHERE TASK = @TASK; 
  
  
END TRY 
  
  
-- ------------------ CATCH IF ERROR -------------------- -- 
  
  
BEGIN CATCH 
    -- DECLARATION - ERROR PART 
    DECLARE @ERRORMESSAGE NVARCHAR(4000);   
    DECLARE @ERRORSEVERITY INT;   
    DECLARE @ERRORSTATE INT; 
    -- INIT - ERROR PART 
    SET @ERRORMESSAGE = CONVERT(NVARCHAR(50), ERROR_LINE()) + ' : ' + ERROR_MESSAGE();   
    SET @ERRORSEVERITY = ERROR_SEVERITY();   
    SET @ERRORSTATE = ERROR_STATE();   
    -- UPDATING LOGS W/ ERROR MESSAGE 
    UPDATE DBO.CFG_SYNCDETAILS SET  
        ERRORMSG = CONVERT(NVARCHAR(20), GETDATE()) + ' - LIGNE ' + @ERRORMESSAGE 
        , LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    WHERE TASK = @TASK; 
    -- RAISING ERROR 
    RAISERROR(@ERRORMESSAGE        -- MESSAGE TEXT.   
            , @ERRORSEVERITY    -- SEVERITY.   
            , @ERRORSTATE        -- STATE.   
    ); 
END CATCH 
  
  
END
