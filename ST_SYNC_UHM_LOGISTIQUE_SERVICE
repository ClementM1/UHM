AS 
/* 
****************** DOCUMENTATION TEMPLATE ******************** 
-- DID AUTHOR: ERICK VAN HOOREN 
-- DID CREATIONDATE: 2022-09-09
-- DID VERSION: 1.0.0  
-- DID DESCRIPTION:  
-- DID BUSINESSRULES: EVERY DAY  
-- DID LASTMODIFIEDBY:  PENELOPE CASSIN 2023-06-15
******************* DOCUMENTATION TEMPLATE ********************  
*/ 


DECLARE @TASK NVARCHAR(50) = 'ST_SYNC_UHM_LOGISTIQUE_SERVICE'; 


BEGIN 
SET NOCOUNT ON; 
BEGIN TRY 
 


-- ------------------ INIT -------------------- --  
-- TASK DETAILS TABLE 
IF OBJECT_ID('DBO.CFG_SYNCDETAILS', 'U') IS NULL 
BEGIN; 
  
    CREATE TABLE DBO.CFG_SYNCDETAILS ( 
        TASK NVARCHAR(50) NOT NULL CONSTRAINT PK_CFG_SYNCDETAILS PRIMARY KEY 
        , LAST_RUNDT DATETIME NULL 
        , LAST_SUCCESSDT DATETIME NULL 
        , LAST_RUNTIME NVARCHAR(8) NULL 
        , ERRORMSG NVARCHAR(MAX) NULL 
        , AQID BIGINT 
        , FGID BIGINT 
        , MTAID BIGINT 
    ); 
END; 
-- ------------------ LOGS -------------------- --  
IF EXISTS (SELECT 1 FROM DBO.CFG_SYNCDETAILS WHERE TASK = @TASK) 
BEGIN; 
    UPDATE DBO.CFG_SYNCDETAILS SET LAST_RUNDT = GETDATE(), ERRORMSG = NULL WHERE TASK = @TASK; 
END; 
ELSE 
BEGIN; 
    INSERT INTO DBO.CFG_SYNCDETAILS (TASK, LAST_RUNDT) VALUES (@TASK, GETDATE()); 
END; 
  
  
-- ------------------ PK & IDX ------------------ -- 
  
  
IF NOT EXISTS (SELECT 1 FROM SYS.INDEXES AS I WITH(NOLOCK) WHERE I.NAME = 'IDX_MATCH_NUM_LOGISTIQUE_SERVICE' AND OBJECT_ID = OBJECT_ID('DBO.SYNC_UHM_LOGISTIQUE_SERVICE', 'U')) 
BEGIN; 
    CREATE NONCLUSTERED INDEX IDX_MATCH ON [DBO].[SYNC_UHM_LOGISTIQUE_SERVICE] ([NUM_LOGISTIQUE_SERVICE]) /* INCLUDE ([X]) */ ; 
END;  

  
-- ------------------ REJECT MNGT ------------------ -- 
  
  
-- EMPTY BUSINESS KEY 
UPDATE TGT SET 
      TGT.OPTI_REJECTED        = 2 
    , TGT.OPTI_REJECTED_REASON = 'NUM_LOGISTIQUE_SERVICE' 
FROM DBO.SYNC_UHM_LOGISTIQUE_SERVICE AS TGT 
WHERE (TGT.OPTI_REJECTED = 0  
OR TGT.OPTI_REJECTED IS NULL) 
AND (TGT.NUM_LOGISTIQUE_SERVICE IS NULL  
OR TGT.NUM_LOGISTIQUE_SERVICE = '')
;  
  
  
-- ------------------ MATCH TABLE ------------------ -- 
  
  
-- CHECK 
IF OBJECT_ID('DBO.TMP_MATCH_SERVICE', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_SERVICE; 
END; 
  
-- CREATE 
CREATE TABLE DBO.TMP_MATCH_SERVICE( 
      SYNCID INT NOT NULL 
    , USERID INT NOT NULL 
    , PRIMARY KEY (SYNCID, USERID) 
); 
  
-- FILL NUM_LOGISTIQUE_SERVICE
INSERT INTO DBO.TMP_MATCH_SERVICE 
    ( SYNCID 
    , USERID ) 
SELECT     
      SRC.ID AS SYNCID 
    , USR.ID AS USERID 
FROM DBO.SYNC_UHM_LOGISTIQUE_SERVICE AS SRC WITH(NOLOCK) 
    INNER JOIN dbo.USERS_UHM_CONTACTS AS USR WITH(NOLOCK) 
        ON SRC.NUM_CONTACT = USR.NUM_CONTACT
WHERE (SRC.OPTI_REJECTED = 0 
OR SRC.OPTI_REJECTED IS NULL);

  
-- ------------------ UPSERT ------------------ -- 
  
  
-- UPDATE FIRST... 
UPDATE TGT SET 
        -- NEVER UPDATE BUSINESS KEY
	  NUM_COMMANDE                          = SRC.NUM_COMMANDE                  
	, NUM_LIGNE_COMMANDE                    = SRC.NUM_LIGNE_COMMANDE            
	, CMTFANN                               = SRC.CMTFANN                       
	, NUM_CONTACT                           = SRC.NUM_CONTACT                   
	, DATE_ANNULATION                       = SRC.DATE_ANNULATION               
	, OPERATEUR_ANNULATION                  = SRC.OPERATEUR_ANNULATION          
	, DATE_CREATION                         = SRC.DATE_CREATION                 
	, OPERATEUR_CREATION                    = SRC.OPERATEUR_CREATION            
	, DATE_DERNIERE_MODIFICATION            = SRC.DATE_DERNIERE_MODIFICATION    
	, OPERATEUR_MODIFICATION                = SRC.OPERATEUR_MODIFICATION        
	, TOP_LOGISTIQUE_PRIME                  = SRC.TOP_LOGISTIQUE_PRIME          
	, CSRV                                  = SRC.CSRV                          
	, CTYPSRV                               = SRC.CTYPSRV                       
	, NPRD                                  = SRC.NPRD                          
	, CPORPIM                               = SRC.CPORPIM                       
	, IDCLPIM                               = SRC.IDCLPIM                       
	, CODE_OPERATION_EDITEUR                = SRC.CODE_OPERATION_EDITEUR        
	, CODE_PROPOSITION_CO                   = SRC.CODE_PROPOSITION_CO           
	, CODE_REF_CO                           = SRC.CODE_REF_CO                   
	, LDES_RCO                              = SRC.LDES_RCO                      
	, CZONTVA                               = SRC.CZONTVA                       
	, CTAUTVA                               = SRC.CTAUTVA                       
	, CODE_REGLEMENT                        = SRC.CODE_REGLEMENT                
	, CODE_VENTILATION                      = SRC.CODE_VENTILATION              
	, CODE_SITUATION                        = SRC.CODE_SITUATION                
	, NDCL                                  = SRC.NDCL                          
	, IDENTIFIANT_TARIFS                    = SRC.IDENTIFIANT_TARIFS            
	, NUM_EVOLUTION                         = SRC.NUM_EVOLUTION                 
	, MONTANT_PRODUIT_TTC                   = SRC.MONTANT_PRODUIT_TTC           
	, TX_REMISE_PRODUIT                     = SRC.TX_REMISE_PRODUIT             
	, MONTANT_REMISE_PRODUIT                = SRC.MONTANT_REMISE_PRODUIT        
	, MONTANT_REMISE_SUPP_PRODUIT           = SRC.MONTANT_REMISE_SUPP_PRODUIT   
	, MONTANT_TOTAL_DU_PRODUIT_TTC          = SRC.MONTANT_TOTAL_DU_PRODUIT_TTC  
	, DATE_DERNIER_REGLEMENT                = SRC.DATE_DERNIER_REGLEMENT        
	, CODE_FAMILLE_SELECTION                = SRC.CODE_FAMILLE_SELECTION        
	, SOCIETE                               = SRC.SOCIETE                       
	, DATE_DEBUT                            = SRC.DATE_DEBUT                    
	, DATE_FIN                              = SRC.DATE_FIN                      
	, QJETPRE                               = SRC.QJETPRE                       
	, QJETSER                               = SRC.QJETSER                       
	, CUNIJET                               = SRC.CUNIJET                       
	, FAIT_GENERATEUR                       = SRC.FAIT_GENERATEUR               
	, TYPE_RESEAU                           = SRC.TYPE_RESEAU                   
	, NUM_CONTRAT_REGROUPEMENT              = SRC.NUM_CONTRAT_REGROUPEMENT      
	, TOP_REAB                              = SRC.TOP_REAB                      
	, REA_NUM_LOGISTIQUE_SRV                = SRC.REA_NUM_LOGISTIQUE_SRV        
	, DDEBACT_ORI                           = SRC.DDEBACT_ORI                   
	, DDEBACT_PLV							= SRC.DDEBACT_PLV
	, SUSPENDU								= SRC.SUSPENDU
	, STATUT								= SRC.STATUT					
FROM DBO.DATA_UHM_LOGISTIQUE_SERVICE AS TGT 
    INNER JOIN DBO.TMP_MATCH_SERVICE AS MAT WITH(NOLOCK)
        ON MAT.USERID = TGT.USERID
    INNER JOIN DBO.SYNC_UHM_LOGISTIQUE_SERVICE AS SRC WITH(NOLOCK)
        ON SRC.ID = MAT.SYNCID
        AND SRC.NUM_LOGISTIQUE_SERVICE = TGT.NUM_LOGISTIQUE_SERVICE		


    

  
-- ... THEN INSERT 
INSERT INTO DBO.DATA_UHM_LOGISTIQUE_SERVICE  
    ( CREATED_DT 
    , MODIFIED_DT 
	, USERID
	, NUM_LOGISTIQUE_SERVICE
	, NUM_COMMANDE
	, NUM_LIGNE_COMMANDE
	, CMTFANN
	, NUM_CONTACT
	, DATE_ANNULATION
	, OPERATEUR_ANNULATION
	, DATE_CREATION
	, OPERATEUR_CREATION
	, DATE_DERNIERE_MODIFICATION
	, OPERATEUR_MODIFICATION
	, TOP_LOGISTIQUE_PRIME
	, CSRV
	, CTYPSRV
	, NPRD
	, CPORPIM
	, IDCLPIM
	, CODE_OPERATION_EDITEUR
	, CODE_PROPOSITION_CO
	, CODE_REF_CO
	, LDES_RCO
	, CZONTVA
	, CTAUTVA
	, CODE_REGLEMENT
	, CODE_VENTILATION
	, CODE_SITUATION
	, NDCL
	, IDENTIFIANT_TARIFS
	, NUM_EVOLUTION
	, MONTANT_PRODUIT_TTC
	, TX_REMISE_PRODUIT
	, MONTANT_REMISE_PRODUIT
	, MONTANT_REMISE_SUPP_PRODUIT
	, MONTANT_TOTAL_DU_PRODUIT_TTC
	, DATE_DERNIER_REGLEMENT
	, CODE_FAMILLE_SELECTION
	, SOCIETE
	, DATE_DEBUT
	, DATE_FIN
	, QJETPRE
	, QJETSER
	, CUNIJET
	, FAIT_GENERATEUR
	, TYPE_RESEAU
	, NUM_CONTRAT_REGROUPEMENT
	, TOP_REAB
	, REA_NUM_LOGISTIQUE_SRV
	, DDEBACT_ORI
	, DDEBACT_PLV
	, SUSPENDU
	, STATUT
	) 
SELECT 
      GETDATE() AS CREATED_DT 
    , GETDATE() AS MODIFIED_DT
	, MAT.USERID
	, SRC.NUM_LOGISTIQUE_SERVICE
	, SRC.NUM_COMMANDE
	, SRC.NUM_LIGNE_COMMANDE
	, SRC.CMTFANN
	, SRC.NUM_CONTACT
	, SRC.DATE_ANNULATION
	, SRC.OPERATEUR_ANNULATION
	, SRC.DATE_CREATION
	, SRC.OPERATEUR_CREATION
	, SRC.DATE_DERNIERE_MODIFICATION
	, SRC.OPERATEUR_MODIFICATION
	, SRC.TOP_LOGISTIQUE_PRIME
	, SRC.CSRV
	, SRC.CTYPSRV
	, SRC.NPRD
	, SRC.CPORPIM
	, SRC.IDCLPIM
	, SRC.CODE_OPERATION_EDITEUR
	, SRC.CODE_PROPOSITION_CO
	, SRC.CODE_REF_CO
	, SRC.LDES_RCO
	, SRC.CZONTVA
	, SRC.CTAUTVA
	, SRC.CODE_REGLEMENT
	, SRC.CODE_VENTILATION
	, SRC.CODE_SITUATION
	, SRC.NDCL
	, SRC.IDENTIFIANT_TARIFS
	, SRC.NUM_EVOLUTION
	, SRC.MONTANT_PRODUIT_TTC
	, SRC.TX_REMISE_PRODUIT
	, SRC.MONTANT_REMISE_PRODUIT
	, SRC.MONTANT_REMISE_SUPP_PRODUIT
	, SRC.MONTANT_TOTAL_DU_PRODUIT_TTC
	, SRC.DATE_DERNIER_REGLEMENT
	, SRC.CODE_FAMILLE_SELECTION
	, SRC.SOCIETE
	, SRC.DATE_DEBUT
	, SRC.DATE_FIN
	, SRC.QJETPRE
	, SRC.QJETSER
	, SRC.CUNIJET
	, SRC.FAIT_GENERATEUR
	, SRC.TYPE_RESEAU
	, SRC.NUM_CONTRAT_REGROUPEMENT
	, SRC.TOP_REAB
	, SRC.REA_NUM_LOGISTIQUE_SRV
	, SRC.DDEBACT_ORI
	, SRC.DDEBACT_PLV    
	, SRC.SUSPENDU
	, SRC.STATUT              
FROM DBO.SYNC_UHM_LOGISTIQUE_SERVICE AS SRC WITH(NOLOCK) 
    INNER JOIN DBO.TMP_MATCH_SERVICE AS MAT WITH(NOLOCK)
        ON MAT.SYNCID = SRC.ID
WHERE  (SRC.OPTI_REJECTED = 0
OR SRC.OPTI_REJECTED IS NULL)
AND NOT EXISTS (
    SELECT 1
    FROM DBO.DATA_UHM_LOGISTIQUE_SERVICE AS CHK WITH(NOLOCK)
    WHERE CHK.USERID = MAT.USERID
    AND CHK.NUM_LOGISTIQUE_SERVICE = SRC.NUM_LOGISTIQUE_SERVICE
);



-- ------------------ CLEAN UP -------------------- -- 
  
  
IF OBJECT_ID('DBO.TMP_MATCH_SERVICE', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_SERVICE; 
END; 
  
  
-- ------------------ END LOGS ------------------ -- 
  
  
UPDATE DBO.CFG_SYNCDETAILS SET 
    LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    , LAST_SUCCESSDT = GETDATE() 
WHERE TASK = @TASK; 
  
  
END TRY 
  
  
-- ------------------ CATCH IF ERROR -------------------- -- 
  
  
BEGIN CATCH 
    -- DECLARATION - ERROR PART 
    DECLARE @ERRORMESSAGE NVARCHAR(4000);   
    DECLARE @ERRORSEVERITY INT;   
    DECLARE @ERRORSTATE INT; 
    -- INIT - ERROR PART 
    SET @ERRORMESSAGE = CONVERT(NVARCHAR(50), ERROR_LINE()) + ' : ' + ERROR_MESSAGE();   
    SET @ERRORSEVERITY = ERROR_SEVERITY();   
    SET @ERRORSTATE = ERROR_STATE();   
    -- UPDATING LOGS W/ ERROR MESSAGE 
    UPDATE DBO.CFG_SYNCDETAILS SET  
        ERRORMSG = CONVERT(NVARCHAR(20), GETDATE()) + ' - LIGNE ' + @ERRORMESSAGE 
        , LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    WHERE TASK = @TASK; 
    -- RAISING ERROR 
    RAISERROR(@ERRORMESSAGE        -- MESSAGE TEXT.   
            , @ERRORSEVERITY    -- SEVERITY.   
            , @ERRORSTATE        -- STATE.   
    ); 
END CATCH 
  
  
END
