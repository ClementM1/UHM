AS 
/* 
****************** DOCUMENTATION TEMPLATE ******************** 
-- DID AUTHOR: ERICK VAN HOOREN 
-- DID CREATIONDATE: 2022-09-12
-- DID VERSION: 1.0.0 
-- DID DESCRIPTION:  
-- DID BUSINESSRULES: EVERY DAY  
-- DID LASTMODIFIEDBY:   
******************* DOCUMENTATION TEMPLATE ********************  
*/ 


DECLARE @TASK NVARCHAR(50) = 'ST_SYNC_UHM_COM_COMMUNICATIONS'; 


BEGIN 
SET NOCOUNT ON; 
BEGIN TRY 
 

-- ------------------ LOGS -------------------- --  
IF EXISTS (SELECT 1 FROM DBO.CFG_SYNCDETAILS WHERE TASK = @TASK) 
BEGIN; 
    UPDATE DBO.CFG_SYNCDETAILS SET LAST_RUNDT = GETDATE(), ERRORMSG = NULL WHERE TASK = @TASK; 
END; 
ELSE 
BEGIN; 
    INSERT INTO DBO.CFG_SYNCDETAILS (TASK, LAST_RUNDT) VALUES (@TASK, GETDATE()); 
END; 
  
  
-- ------------------ PK & IDX ------------------ -- 
  
  
IF NOT EXISTS (SELECT 1 FROM SYS.INDEXES AS I WITH(NOLOCK) WHERE I.NAME = 'IDX_MATCH_NUM_CONTACT' AND OBJECT_ID = OBJECT_ID('DBO.SYNC_UHM_COM_COMMUNICATIONS', 'U')) 
BEGIN; 
    CREATE NONCLUSTERED INDEX IDX_MATCH ON [DBO].[SYNC_UHM_COM_COMMUNICATIONS] ([NUM_CONTACT]); 
END;  

  
-- ------------------ REJECT MNGT ------------------ -- 
-- EMPTY BUSINESS KEY 
UPDATE TGT SET 
      TGT.OPTI_REJECTED        = 2 
    , TGT.OPTI_REJECTED_REASON = 'NUM_CONTACT' 
FROM DBO.SYNC_UHM_COM_CONTACTS AS TGT 
WHERE (TGT.OPTI_REJECTED = 0  
OR TGT.OPTI_REJECTED IS NULL) 
AND (TGT.NUM_CONTACT IS NULL  
OR TGT.NUM_CONTACT = '')
;  
  
  
-- ------------------ MATCH TABLE ------------------ -- 
 
-- CHECK 
IF OBJECT_ID('DBO.TMP_MATCH_COM_CONTACT', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_COM_CONTACT; 
END; 
  
-- CREATE 
CREATE TABLE DBO.TMP_MATCH_COM_CONTACT( 
      SYNCID INT NOT NULL 
    , USERID INT NOT NULL 
    , PRIMARY KEY (SYNCID, USERID) 
); 
  
-- FILL ID_MAGELLAN
INSERT INTO DBO.TMP_MATCH_COM_CONTACT 
    ( SYNCID 
    , USERID ) 
SELECT     
      SRC.ID AS SYNCID 
    , USR.ID AS USERID 
FROM DBO.SYNC_UHM_COM_CONTACTS AS SRC WITH(NOLOCK)  
    INNER JOIN DBO.USERS_UHM_CONTACTS AS USR WITH(NOLOCK)  
        ON SRC.NUM_CONTACT = USR.NUM_CONTACT
WHERE (SRC.OPTI_REJECTED = 0  
OR SRC.OPTI_REJECTED IS NULL)
; 
  
-- ...  INSERT 
INSERT INTO DATA_UHM_COMMUNICATIONS(
NUM_CONTACT,
	CTIT,
CSOC,
	CVCR,
	CCMN,
	DCRECMN,
	NCDE,
	NLOG,
	CTYPPRD,
	ADRBQE,
	ADRESSE1,
	ADRESSE1EXPED,
	ADRESSE1TP,
	ADRESSE2,
	ADRESSE2EXPED,
	ADRESSE2TP,
	ADRESSE3,
	ADRESSE3EXPED,
	ADRESSE3TP,
	ADRESSE4,
	ADRESSE4EXPED,
	ADRESSE4TP,
	ADRESSE5,
	ADRESSE5EXPED,
	ADRESSE5TP,
	ADRESSE6,
	ADRESSE6EXPED,
	ADRESSE6TP,
	B_TIERS_PAYEUR,
	C_BARRE_NPAI,
	C_EDITION,
	C_EXPEDITION,
	C_MOTIF_IMP,
	C_OPE_CRE_COM,
	C_OPE_EDI_LOG,
	C_PRD_IMP,
	C_REF_COM_LOG,
	C_REG_IMP,
	C_RELANCE,
	C_SOC,
	C_SOC_IMP,
	C_TIT,
	CBIC,
	CCODPOSBQE,
	CDEPOSTALEXPED,
	CDEPOSTALTP,
	CIVABO,
	CIVENT,
	CIVEXPEDABO,
	CIVEXPEDENT,
	CIVEXPEDLEC,
	CIVEXPEDMR,
	CIVILITE,
	CIVILITEEXPED,
	CIVILITETP,
	CIVLEC,
	CIVMR,
	CIVTPABO,
	CIVTPENT,
	CIVTPLEC,
	CIVTPMR,
	CODE_REFCO_Z1,
	CODE_REFCO_Z2,
	CODE_REGLT,
	CODE_SITUATION,
	CODEPOSTAL,
	COMMUN,
	COMMUNICATION,
	CPTNOM,
	CPTNOMEXPED,
	CPTNOMTP,
	CPTRAISOCEXPED,
	CPTRAISOCTP,
	CPTRAISSOCIAL,
	D_CRE_COM,
	D_CRE_LOG,
	D_D_REGLT_LOG,
	D_DEBABT,
	D_DSERAN,
	D_FINABT, 
	D_PFRA_LOG,
	DANN_CDE,
	DAT_DEBEXC,
	DAT_FINEXC,
	DATDEB_ADR_TMP,
	DATDERNUMSERV,
	DATE_NDEBABT,
	DATE_NFINABT,
	DATEANNULATION,
	DATEXIGIBILITE,
	DATFIN_ADR_TMP,
	DDEBLISTE,
	DERNUMSERV,
	DERNUMSERVANNU,
	DFINLISTE,
	DPROLONGE,
	DUREE_ABT,
	MAIL,
	EMAILEXPED,
	EMAILTP,
	FONCTION,
	FONCTIONEXPED,
	FONCTIONTP,
	FORJUR,
	FORJUREXPED,
	FORJURTP,
	LA_EDITION,
	LA_SOC,
	LA_TIT,
	LAGC,
	LBQE,
	LCOMBQE,
	LD_EDITION,
	LD_EXP,
	LD_MOTIF_IMP,
	LD_OPE_EDI_LOG,
	LD_REF_COM_LOG,
	LD_REGLT,
	LD_RELANCE,
	LD_SITUATION,
	LD_SOC,
	LD_TIT,
	LDCOM_REFCO_Z1,
	LDCOM_REFCO_Z2,
	LDES_REFCO_Z1,
	LDES_REFCO_Z2,
	M_FRA_LOG_PLV,
	M_TOT_ACH_CDE,
	M_TOT_CDE_DU,
	MNT_RST_DU_LOG,
	MONT_ACH_LOG,
	MONT_FRA_PLV,
	MONT_IMP,
	MONT_PEN_IMP,
	MONT_RBT,
	MONT_REFCO_Z1,
	MONT_REFCO_Z2,
	MONT_REM_LOG,
	MONT_RSUP_LOG,
	MONT_TOT_LOG,
	MONT_TOT_REFCO,
	MONT_TVA_LOG,
	N_CARTE_IMP,
	N_CHQ_IMP,
	N_CONTACT,
	N_CONTACTEXPED,
	N_CONTACTTP,
	N_DEBABT,
	N_FINABT,
	N_RANG_IMP,
	N_RIB_IMP,
	NCARTE,
	NIBAN,
	NICS,
	NNUMPROLONG,
	NOM,
	NOMEXPED,
	NOMTP,
	NRIB,
	NRUM,
	NUM_CONTRAT,
	PAYS,
	PAYSEXPED,
	PAYSTP,
	PRENOM,
	PRENOMEXPED,
	PRENOMTP,
	PROVINCE,
	NTELF,
	NTELP,
	MICRO,
	VOLTRACE,
	DEVISBASE,
	QTE_ABT,
	RAISOCIALEXPED,
	RAISOCIALTP,
	RAISONSOCIAL,
	TAUX_TVA,
	TAUXREMISE,
	VECTEUR,
	VILLE,
	VILLEEXPED,
	VILLETP,
	Z_LIBRE1,
	Z_LIBRE2,
	Z_LIBRE3,
	Z_LIBRE4,
	Z_LIBRE5,
	ZIPCODE,
	ZIPCODEEXPED,
	ZIPCODETP,
	DATE_EXPIRATION_CB,
	CODE_AVANTAGE,
	MNTCAVT,
	DATE_VALIDITE_AVANTAGE,
	FREQUENCE_GUIDE_PREL,
	DATE_MODIFICATION_CREATION,
	MNT_PRE_FRN,
	D_ECH_LOG_PREC
	)
SELECT
	TMPCOMM.NUM_CONTACT,
	TMPCOMM.CSOC,
	TMPCOMM.CTIT,
	TMPCOMM.CVCR,
	TMPCOMM.CCMN,
	CONVERT(DATE, TMPCOMM.DCRECMN, 112),
	TMPCOMM.NCDE,
	TMPCOMM.NLOG,
	TMPCOMM.CTYPPRD,
	TMPCOMM.ADRBQE,
	TMPCOMM.ADRESSE1,
	TMPCOMM.ADRESSE1EXPED,
	TMPCOMM.ADRESSE1TP,
	TMPCOMM.ADRESSE2,
	TMPCOMM.ADRESSE2EXPED,
	TMPCOMM.ADRESSE2TP,
	TMPCOMM.ADRESSE3,
	TMPCOMM.ADRESSE3EXPED,
	TMPCOMM.ADRESSE3TP,
	TMPCOMM.ADRESSE4,
	TMPCOMM.ADRESSE4EXPED,
	TMPCOMM.ADRESSE4TP,
	TMPCOMM.ADRESSE5,
	TMPCOMM.ADRESSE5EXPED,
	TMPCOMM.ADRESSE5TP,
	TMPCOMM.ADRESSE6,
	TMPCOMM.ADRESSE6EXPED,
	TMPCOMM.ADRESSE6TP,
	TMPCOMM.B_TIERS_PAYEUR,
	TMPCOMM.C_BARRE_NPAI,
	TMPCOMM.C_EDITION,
	TMPCOMM.C_EXPEDITION,
	TMPCOMM.C_MOTIF_IMP,
	TMPCOMM.C_OPE_CRE_COM,
	TMPCOMM.C_OPE_EDI_LOG,
	TMPCOMM.C_PRD_IMP,
	TMPCOMM.C_REF_COM_LOG,
	TMPCOMM.C_REG_IMP,
	TMPCOMM.C_RELANCE,
	TMPCOMM.C_SOC,
	TMPCOMM.C_SOC_IMP,
	TMPCOMM.C_TIT,
	TMPCOMM.CBIC,
	TMPCOMM.CCODPOSBQE,
	TMPCOMM.CDEPOSTALEXPED,
	TMPCOMM.CDEPOSTALTP,
	TMPCOMM.CIVABO,
	TMPCOMM.CIVENT,
	TMPCOMM.CIVEXPEDABO,
	TMPCOMM.CIVEXPEDENT,
	TMPCOMM.CIVEXPEDLEC,
	TMPCOMM.CIVEXPEDMR,
	TMPCOMM.CIVILITE,
	TMPCOMM.CIVILITEEXPED,
	TMPCOMM.CIVILITETP,
	TMPCOMM.CIVLEC,
	TMPCOMM.CIVMR,
	TMPCOMM.CIVTPABO,
	TMPCOMM.CIVTPENT,
	TMPCOMM.CIVTPLEC,
	TMPCOMM.CIVTPMR,
	TMPCOMM.CODE_REFCO_Z1,
	TMPCOMM.CODE_REFCO_Z2,
	TMPCOMM.CODE_REGLT,
	TMPCOMM.CODE_SITUATION,
	TMPCOMM.CODEPOSTAL,
	TMPCOMM.COMMUN,
	TMPCOMM.COMMUNICATION,
	TMPCOMM.CPTNOM,
	TMPCOMM.CPTNOMEXPED,
	TMPCOMM.CPTNOMTP,
	TMPCOMM.CPTRAISOCEXPED,
	TMPCOMM.CPTRAISOCTP,
	TMPCOMM.CPTRAISSOCIAL,
	CONVERT(DATE, TMPCOMM.D_CRE_COM, 112),
	CONVERT(DATE, TMPCOMM.D_CRE_LOG, 112),
	CONVERT(DATE, TMPCOMM.D_D_REGLT_LOG, 112),
	TMPCOMM.D_DEBABT, -- Date au format yyyy-mm-dd
	CONVERT(DATE, TMPCOMM.D_DSERAN, 112),
	TMPCOMM.D_FINABT, -- Date au format yyyy-mm-dd
	CONVERT(DATE, TMPCOMM.D_PFRA_LOG, 112),
	CONVERT(DATE, TMPCOMM.DANN_CDE, 112),
	CONVERT(DATE, TMPCOMM.DAT_DEBEXC, 112),
	CONVERT(DATE, TMPCOMM.DAT_FINEXC, 112),
	CONVERT(DATE, TMPCOMM.DATDEB_ADR_TMP, 112),
	CONVERT(DATE, TMPCOMM.DATDERNUMSERV, 112),
	CONVERT(DATE, TMPCOMM.DATE_NDEBABT, 112),
	CONVERT(DATE, TMPCOMM.DATE_NFINABT, 112),
	CONVERT(DATE, TMPCOMM.DATEANNULATION, 112),
	CONVERT(DATE, TMPCOMM.DATEXIGIBILITE, 112),
	CONVERT(DATE, TMPCOMM.DATFIN_ADR_TMP, 112),
	CONVERT(DATE, TMPCOMM.DDEBLISTE, 112),
	TMPCOMM.DERNUMSERV,
	TMPCOMM.DERNUMSERVANNU,
	CONVERT(DATE, TMPCOMM.DFINLISTE, 112),
	CONVERT(DATE, TMPCOMM.DPROLONGE, 112),
	TMPCOMM.DUREE_ABT,
	TMPCOMM.EMAIL,
	TMPCOMM.EMAILEXPED,
	TMPCOMM.EMAILTP,
	TMPCOMM.FONCTION,
	TMPCOMM.FONCTIONEXPED,
	TMPCOMM.FONCTIONTP,
	TMPCOMM.FORJUR,
	TMPCOMM.FORJUREXPED,
	TMPCOMM.FORJURTP,
	TMPCOMM.LA_EDITION,
	TMPCOMM.LA_SOC,
	TMPCOMM.LA_TIT,
	TMPCOMM.LAGC,
	TMPCOMM.LBQE,
	TMPCOMM.LCOMBQE,
	TMPCOMM.LD_EDITION,
	TMPCOMM.LD_EXP,
	TMPCOMM.LD_MOTIF_IMP,
	TMPCOMM.LD_OPE_EDI_LOG,
	TMPCOMM.LD_REF_COM_LOG,
	TMPCOMM.LD_REGLT,
	TMPCOMM.LD_RELANCE,
	TMPCOMM.LD_SITUATION,
	TMPCOMM.LD_SOC,
	TMPCOMM.LD_TIT,
	TMPCOMM.LDCOM_REFCO_Z1,
	TMPCOMM.LDCOM_REFCO_Z2,
	TMPCOMM.LDES_REFCO_Z1,
	TMPCOMM.LDES_REFCO_Z2,
	TMPCOMM.M_FRA_LOG_PLV,
	TMPCOMM.M_TOT_ACH_CDE,
	TMPCOMM.M_TOT_CDE_DU,
	TMPCOMM.MNT_RST_DU_LOG,
	TMPCOMM.MONT_ACH_LOG,
	TMPCOMM.MONT_FRA_PLV,
	TMPCOMM.MONT_IMP,
	TMPCOMM.MONT_PEN_IMP,
	TMPCOMM.MONT_RBT,
	TMPCOMM.MONT_REFCO_Z1,
	TMPCOMM.MONT_REFCO_Z2,
	TMPCOMM.MONT_REM_LOG,
	TMPCOMM.MONT_RSUP_LOG,
	TMPCOMM.MONT_TOT_LOG,
	TMPCOMM.MONT_TOT_REFCO,
	TMPCOMM.MONT_TVA_LOG,
	TMPCOMM.N_CARTE_IMP,
	TMPCOMM.N_CHQ_IMP,
	LTRIM(RTRIM(TMPCOMM.N_CONTACT)),
	TMPCOMM.N_CONTACTEXPED,
	CASE
		WHEN TMPCOMM.N_CONTACTTP = LTRIM(RTRIM(TMPCOMM.N_CONTACT)) THEN NULL
		ELSE TMPCOMM.N_CONTACTTP
	END,										
	TMPCOMM.N_DEBABT,
	TMPCOMM.N_FINABT,
	TMPCOMM.N_RANG_IMP,
	TMPCOMM.N_RIB_IMP,
	TMPCOMM.NCARTE,
	TMPCOMM.NIBAN,
	TMPCOMM.NICS,
	TMPCOMM.NNUMPROLONG,
	TMPCOMM.NOM,
	TMPCOMM.NOMEXPED,
	TMPCOMM.NOMTP,
	TMPCOMM.NRIB,
	TMPCOMM.NRUM,
	TMPCOMM.NUM_CONTRAT,
	TMPCOMM.PAYS,
	TMPCOMM.PAYSEXPED,
	TMPCOMM.PAYSTP,
	TMPCOMM.PRENOM,
	TMPCOMM.PRENOMEXPED,
	TMPCOMM.PRENOMTP,
	TMPCOMM.PROVINCE,
	TMPCOMM.NTELF,
	TMPCOMM.NTELP,
	TMPCOMM.MICRO,
	TMPCOMM.VOLTRACE,
	TMPCOMM.DEVISBASE,
	TMPCOMM.QTE_ABT,
	TMPCOMM.RAISOCIALEXPED,
	TMPCOMM.RAISOCIALTP,
	TMPCOMM.RAISONSOCIAL,
	TMPCOMM.TAUX_TVA,
	TMPCOMM.TAUXREMISE,
	TMPCOMM.VECTEUR,
	TMPCOMM.VILLE,
	TMPCOMM.VILLEEXPED,
	TMPCOMM.VILLETP,
	TMPCOMM.Z_LIBRE1,
	TMPCOMM.Z_LIBRE2,
	TMPCOMM.Z_LIBRE3,
	TMPCOMM.Z_LIBRE4,
	TMPCOMM.Z_LIBRE5,
	TMPCOMM.ZIPCODE,
	TMPCOMM.ZIPCODEEXPED,
	TMPCOMM.ZIPCODETP,
	TMPCOMM.DAT_EXP_CBL,
	TMPCOMM.CAVT,
	TMPCOMM.MNTCAVT,
	CONVERT(DATE, TMPCOMM.DFINCAVT, 112),
	TMPCOMM.FRE_GUI_PREL,
	GETDATE(),
	TMPCOMM.MONT_PRE_FRN,
	TMPCOMM.D_ECH_LOG_PREC
FROM SYNC_UHM_COM_COMMUNICATIONS AS TMPCOMM WITH(NOLOCK) 
    --INNER JOIN DBO.TMP_MATCH_COM_CONTACT AS MAT WITH(NOLOCK)
        --ON MAT.SYNCID = TMPCOMM.ID
WHERE  (TMPCOMM.OPTI_REJECTED = 0
OR TMPCOMM.OPTI_REJECTED IS NULL) 

  

-- ------------------ END LOGS ------------------ -- 
  
  
UPDATE DBO.CFG_SYNCDETAILS SET 
    LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    , LAST_SUCCESSDT = GETDATE() 
WHERE TASK = @TASK; 
  
  
END TRY 
  
  
-- ------------------ CATCH IF ERROR -------------------- -- 
  
  
BEGIN CATCH 
    -- DECLARATION - ERROR PART 
    DECLARE @ERRORMESSAGE NVARCHAR(4000);   
    DECLARE @ERRORSEVERITY INT;   
    DECLARE @ERRORSTATE INT; 
    -- INIT - ERROR PART 
    SET @ERRORMESSAGE = CONVERT(NVARCHAR(50), ERROR_LINE()) + ' : ' + ERROR_MESSAGE();   
    SET @ERRORSEVERITY = ERROR_SEVERITY();   
    SET @ERRORSTATE = ERROR_STATE();   
    -- UPDATING LOGS W/ ERROR MESSAGE 
    UPDATE DBO.CFG_SYNCDETAILS SET  
        ERRORMSG = CONVERT(NVARCHAR(20), GETDATE()) + ' - LIGNE ' + @ERRORMESSAGE 
        , LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    WHERE TASK = @TASK; 
    -- RAISING ERROR 
    RAISERROR(@ERRORMESSAGE        -- MESSAGE TEXT.   
            , @ERRORSEVERITY    -- SEVERITY.   
            , @ERRORSTATE        -- STATE.   
    ); 
END CATCH 
  
  
END
