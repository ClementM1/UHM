AS 
/* 
****************** DOCUMENTATION TEMPLATE ******************** 
-- DID AUTHOR: ERICK VAN HOOREN 
-- DID CREATIONDATE: 2022-09-09 
-- DID VERSION: 1.0.0  
-- DID DESCRIPTION:  
-- DID BUSINESSRULES: EVERY DAY  
-- DID LASTMODIFIEDBY:  
******************* DOCUMENTATION TEMPLATE ********************  
*/ 


DECLARE @TASK NVARCHAR(50) = 'ST_SYNC_UHM_TIRAGES'; 


BEGIN 
SET NOCOUNT ON; 
BEGIN TRY 
 


-- ------------------ INIT -------------------- --  
-- TASK DETAILS TABLE 
IF OBJECT_ID('DBO.CFG_SYNCDETAILS', 'U') IS NULL 
BEGIN; 
  
    CREATE TABLE DBO.CFG_SYNCDETAILS ( 
        TASK NVARCHAR(50) NOT NULL CONSTRAINT PK_CFG_SYNCDETAILS PRIMARY KEY 
        , LAST_RUNDT DATETIME NULL 
        , LAST_SUCCESSDT DATETIME NULL 
        , LAST_RUNTIME NVARCHAR(8) NULL 
        , ERRORMSG NVARCHAR(MAX) NULL 
        , AQID BIGINT 
        , FGID BIGINT 
        , MTAID BIGINT 
    ); 
END; 
-- ------------------ LOGS -------------------- --  
IF EXISTS (SELECT 1 FROM DBO.CFG_SYNCDETAILS WHERE TASK = @TASK) 
BEGIN; 
    UPDATE DBO.CFG_SYNCDETAILS SET LAST_RUNDT = GETDATE(), ERRORMSG = NULL WHERE TASK = @TASK; 
END; 
ELSE 
BEGIN; 
    INSERT INTO DBO.CFG_SYNCDETAILS (TASK, LAST_RUNDT) VALUES (@TASK, GETDATE()); 
END; 
  
  
-- ------------------ PK & IDX ------------------ -- 
  
  
IF NOT EXISTS (SELECT 1 FROM SYS.INDEXES AS I WITH(NOLOCK) WHERE I.NAME = 'IDX_MATCH_USERID' AND OBJECT_ID = OBJECT_ID('DBO.SYNC_UHM_TIRAGES', 'U')) 
BEGIN; 
    CREATE NONCLUSTERED INDEX IDX_MATCH ON [DBO].[SYNC_UHM_TIRAGES] ([NUM_CONTACT]) /* INCLUDE ([X]) */ ; 
END;  

  
-- ------------------ REJECT MNGT ------------------ -- 
  
  
-- EMPTY BUSINESS KEY 
UPDATE TGT SET 
      TGT.OPTI_REJECTED        = 2 
    , TGT.OPTI_REJECTED_REASON = 'NUM_CONTACT' 
FROM DBO.SYNC_UHM_TIRAGES AS TGT 
WHERE (TGT.OPTI_REJECTED = 0  
OR TGT.OPTI_REJECTED IS NULL) 
AND (TGT.NUM_CONTACT IS NULL  
OR TGT.NUM_CONTACT = '')
;  
  
  
-- ------------------ MATCH TABLE ------------------ -- 
  
  
-- CHECK 
IF OBJECT_ID('DBO.TMP_MATCH_TIRAGES', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_TIRAGES; 
END; 
  
-- CREATE 
CREATE TABLE DBO.TMP_MATCH_TIRAGES( 
      SYNCID INT NOT NULL 
    , USERID INT NOT NULL 
    , PRIMARY KEY (SYNCID, USERID) 
); 
  
-- FILL ID_MAGELLAN
INSERT INTO DBO.TMP_MATCH_TIRAGES 
    ( SYNCID 
    , USERID ) 
SELECT     
      SRC.ID AS SYNCID 
    , USR.ID AS USERID 
FROM DBO.SYNC_UHM_TIRAGES AS SRC WITH(NOLOCK)  
    INNER JOIN DBO.USERS_UHM_CONTACTS AS USR WITH(NOLOCK)  
        ON SRC.NUM_CONTACT = USR.NUM_CONTACT
WHERE (SRC.OPTI_REJECTED = 0  
OR SRC.OPTI_REJECTED IS NULL)
; 

  
-- ------------------ UPSERT ------------------ -- 
  
  
-- UPDATE FIRST... 
UPDATE TGT SET 
        -- NEVER UPDATE BUSINESS KEY 
          ---TGT.MODIFIED_DT                = GETDATE() 
          TGT.NUM_LOGISTIQUE         	= SRC.NUM_LOGISTIQUE
        , TGT.CODE_SOCIETE              = SRC.CODE_SOCIETE
        , TGT.CODE_TITRE                = SRC.CODE_TITRE
        , TGT.CODE_EDITION              = SRC.CODE_EDITION
        , TGT.NUM_PARUTION              = SRC.NUM_PARUTION
        , TGT.DATE_EXPEDITION           = SRC.DATE_EXPEDITION
FROM DBO.DATA_UHM_HISTORIQUE_TIRAGES AS TGT 
    INNER JOIN DBO.TMP_MATCH_TIRAGES AS MAT WITH(NOLOCK) 
        ON MAT.USERID = TGT.USERID
    INNER JOIN DBO.SYNC_UHM_TIRAGES AS SRC WITH(NOLOCK) 
        ON SRC.NUM_CONTACT 		= TGT.NUM_CONTACT
        AND TGT.NUM_LOGISTIQUE  = SRC.NUM_LOGISTIQUE
        AND TGT.CODE_SOCIETE    = SRC.CODE_SOCIETE
        AND TGT.CODE_TITRE      = SRC.CODE_TITRE
        AND TGT.CODE_EDITION    = SRC.CODE_EDITION
        AND TGT.NUM_PARUTION    = SRC.NUM_PARUTION
        AND TGT.DATE_EXPEDITION = SRC.DATE_EXPEDITION   

  
-- ... THEN INSERT 
INSERT INTO DBO.DATA_UHM_HISTORIQUE_TIRAGES  
    (  NUM_CONTACT 
    , USERID
    , NUM_LOGISTIQUE
    , CODE_SOCIETE  
    , CODE_TITRE    
    , CODE_EDITION  
    , NUM_PARUTION  
    , DATE_EXPEDITION   
    ) 
SELECT
      SRC.NUM_CONTACT 
    , MAT.USERID
    , SRC.NUM_LOGISTIQUE
    , SRC.CODE_SOCIETE  
    , SRC.CODE_TITRE    
    , SRC.CODE_EDITION  
    , SRC.NUM_PARUTION  
    , SRC.DATE_EXPEDITION 
FROM DBO.SYNC_UHM_TIRAGES AS SRC WITH(NOLOCK) 
    INNER JOIN DBO.TMP_MATCH_TIRAGES AS MAT WITH(NOLOCK)
        ON MAT.SYNCID = SRC.ID
WHERE  (SRC.OPTI_REJECTED = 0
OR SRC.OPTI_REJECTED IS NULL) 
AND NOT EXISTS ( 
    SELECT 1  
    FROM DBO.SYNC_UHM_TIRAGES AS TGT WITH(NOLOCK)  
    WHERE SRC.NUM_CONTACT = TGT.NUM_CONTACT
        AND TGT.NUM_LOGISTIQUE  = SRC.NUM_LOGISTIQUE
        AND TGT.CODE_SOCIETE    = SRC.CODE_SOCIETE
        AND TGT.CODE_TITRE      = SRC.CODE_TITRE
        AND TGT.CODE_EDITION    = SRC.CODE_EDITION
        AND TGT.NUM_PARUTION    = SRC.NUM_PARUTION
        AND TGT.DATE_EXPEDITION = SRC.DATE_EXPEDITION
); 


 
-- ------------------ CLEAN UP -------------------- -- 
  
  
IF OBJECT_ID('DBO.TMP_MATCH_TIRAGES', 'U') IS NOT NULL 
BEGIN; 
    DROP TABLE DBO.TMP_MATCH_TIRAGES; 
END; 
  
  
-- ------------------ END LOGS ------------------ -- 
  
  
UPDATE DBO.CFG_SYNCDETAILS SET 
    LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    , LAST_SUCCESSDT = GETDATE() 
WHERE TASK = @TASK; 
  
  
END TRY 
  
  
-- ------------------ CATCH IF ERROR -------------------- -- 
  
  
BEGIN CATCH 
    -- DECLARATION - ERROR PART 
    DECLARE @ERRORMESSAGE NVARCHAR(4000);   
    DECLARE @ERRORSEVERITY INT;   
    DECLARE @ERRORSTATE INT; 
    -- INIT - ERROR PART 
    SET @ERRORMESSAGE = CONVERT(NVARCHAR(50), ERROR_LINE()) + ' : ' + ERROR_MESSAGE();   
    SET @ERRORSEVERITY = ERROR_SEVERITY();   
    SET @ERRORSTATE = ERROR_STATE();   
    -- UPDATING LOGS W/ ERROR MESSAGE 
    UPDATE DBO.CFG_SYNCDETAILS SET  
        ERRORMSG = CONVERT(NVARCHAR(20), GETDATE()) + ' - LIGNE ' + @ERRORMESSAGE 
        , LAST_RUNTIME = CONVERT(NVARCHAR(8), GETDATE() - LAST_RUNDT, 114) 
    WHERE TASK = @TASK; 
    -- RAISING ERROR 
    RAISERROR(@ERRORMESSAGE        -- MESSAGE TEXT.   
            , @ERRORSEVERITY    -- SEVERITY.   
            , @ERRORSTATE        -- STATE.   
    ); 
END CATCH 
  
  
END
